This is here for my own reference and documentation.

- Purpletrauma

V 1.1: Many revisions.

1. Removed simple outfits. The more complex system wound up being the highlight of the character randomizer, so unless I find a reason why it should be included, it's cut. I'll keep the old lists, though. Maybe I'll find a use for them later, not that I ever properly filled those in.
2. Added a "bypass checks" variable to just combine everything together and skipp all checks that are in place to ensure results are appropriate.
3. Added the shoes in by default rather than save them for the accessories; just made sense.
4. Added a user input to bypass species: the highlight really is the outfit generator, so if you don't want some silly species..
5. Found out lists could += themselves; at some point I thought it would result in: [1, 2, 3, [4, 5, 6]] instead of the desired [1, 2, 3, 4, 5, 6] if I did that.. a quick test proved it was fine. The difference is negligible efficiency improvement and marginally more readable code, but that's good enough for me to change it.
6. Added cold/warm overwear check to add appropriate items (currently just shoes, but will involve some accessory options later) to the proper lists.
7. In the process of getting that running, it should now be easier to do all kinds of appropriateness checks for the clothing, though it will require the order of selected clothes to be carefully planned.
8. Added a .geany project file. I wanted to use a python-specific IDE, but.. wound up either too complex an environment to work with (constant error messages WHILE I'm writing? Highlighting lines where the run program breaks, and the colors used make it unreadable!? Complete customization, but so feature rich I will need a one week lesson course that doesn't exist to be able to properly set it up in a way that using a simpler IDE would largely fix) or not as portable as needed (I code on Linux, Raspberry Pi (64bit), and own an Android tablet with a keyboard that may get involved in the future, so it needs to run on basically anything).
9. The carefully planned order for 7 was bothering me, restructured it so that the code now chooses final options, then re-selects items based on checks. Order no longer matters, but adding lots of checks could make the results too chaotic. I doubt I will add that many, though. If I'm going to have 20 checks, I just need a more versatile system for compiling results than "Is X this? Then add that to the other list and choose a new result."
10. Found a bug caused by not treating lists properly, leading to, apparently, the lists becoming ever longer each cycle with duplicate items. Wasn't noticeable until the code was getting more complex and results were beginning to show up in combinations that weren't supposed to be possible. It didn't break the code until today, it just made it more inefficient in an invisible. As a standard, the starting of all local lists now use .copy() instead of just = otherList.
11. Odds and ends of minor changes. Particularly fond of mermaid (cephalopod) added to species.


V 1.0: CLI edition complete. Ish.

Honestly, it's hardly complete. Some lists could use populating still, and I'm not completely satisfied with the game randomizer, but I think I may have more options for building the randomizers if I had drop menus, tabs, checkboxes, and other GUI elements to work with.

So for now, I did a few various tweaks and changes, put together a random game prompt generator. It is okay, but I feel the random mechanics could be better.

Next time I update will be 1.1, and the start of adding GUI. May be a week before I push another update.. unless I really just want to work on those lists that need work.

1.0 was nothing but a benchmark before I decided I had enough randomized content for now and started on the GUI anyway. I didn't want to bog down with error checking and revising for usability on a CLI, so I focused on making the randomizers run before I put my real effort into the GUI.


v 0.4: got to cracking shortly after the last update, and added more lists, and begun the random game generator.

More or less, I did some more idle work on the lists, and added 3 new lists in preparation for the game generator, as well as spent a lot of time considering how the game generator will work.

I feel my gut feelings have served me well through the other randomizers and getting the right combination for specific and general to make many possible combinations, but produce coherent ideas from them. So I spent hours working through those gut feelings.

Currently I feel I am close with the description on the readme, but that I'm not quite there.


V 0.3: I sat back and did lots of minor things.

Altered many inline comments, removed a few blank results that found their way into my lists due to how I populated them with copied online lists that I find-and-replaced to fit into the code. Renamed some variables to be clearer about their contents among the lists.

Added a bit to the to-do list, and.. really, I worked on revising and improving the lists in general this time, that's where most of the effort went.

Had the idea to make a list of lists to manage singular/plural forms of words, then realized I could cut out the singular form of that particular list by adding a single word to the location randomizer, simplifying the work immensely.

May keep in mind the idea of a list of lists for later, though. Say, if I get my list of greek words, so I can pull a random result from the main list, get ["arachne", "spider"] and then pull from the proper indexes to use both the Greek and English forms of the word.

Tweaked the random location generator to give more varried results, especially in silly mode.

Altered the randomizer that adds "punk" to the end of a random word to make a genre so that if 1 or fewer results were requested of it, it gives a single string result.

Attempted to start the game generator in the hopes of ticking that off and declaring this V1.0 so that I could begin on GUI development, but I'm still undecided on how it should function enough to begin. I have some ideas and am getting there, though.


V 0.2: Fixed an incomplete part of the code for the random outfit on the character generator. I focused so much on the harder part, I forgot to do the easy half. Revised location generator to no longer compile results into a sentence, but a set of keywords like the character randomizer. I like this set-up better. More upfront about throwing the content at the user to interpret it:

"Genre: paranormalpunk
Location: shopping center
Social Structure: a team
Species: hairless dwarves."

Rather than "A paranormalpunk shopping center populated by a team of hairless dwarves."

Hairless dwarves is such a perfect combination possibility. So is paranormalpunk, really.

Also added a check for legless species, after not noticing that I was reading from the wrong variable for an hour, resulting in all True results from the function.


V 0.1: initial commit. A mostly functional CLI set of randomizers, with a couple things on the to-do list still before I declare it 1.0 and begin work on the 2.0 GUI version.

