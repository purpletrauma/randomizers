This is here for my own reference and documentation.

- Purpletrauma

V 1.3:

1. Forgot to do last time while recoding how clothing checks was done: I added ties that only appear as options when a collared shirt is on the character.
2. Added triple-quote docstrings at the start of each file to define what the file is used for.
3. Due to defining what goes where, the outfit randomizer was moved to core.py as it fit more in that category than utilityFuncs.py. Silly check was also moved to utilityFuncs.
4. Added a very simple isItTrue definition to utilityFuncs to turn the various 1/0 inputs into true/false. All non-1 responses now default to false, bypassing most errors possible. Silly check now runs this rather than its own true/false return. Thought of replacing it outright, but still need the question to be used in multiple places, so it stays. I doubt it's used everywhere it could be; I admit I'm not trying that hard to recode everything as my mind is elsewhere.
5. While testing the isItTrue addition, found that I had left in an errant + in the location generator and fixed it.
6. None of it is addeded as every use of a list from theLists would need to be changed, but I'm experimenting with how classes work; testing some ideas to see if I can completely recode the lists to be more efficient and easier to call, and the best ways to accomplish what I want from it. Currently planning a class under utilityFuncs that is inhereted to create objects that have return functions for the various combinations needed. Currently struggling with the idea that it would be a clothes class, then either inherited clothes classes that add extra lists for stuff that needs it, or use-specific classes that add exactly what they need.. I don't like either path of having a super specific variations, or super general versions that have more than they need most of the time.. wondering if I could reclassify what I think of as an object to make the right ratio of specific to general.. not to mention there are non-clothes.. there's probably a better approach here, and while I am excited to have figured out how to call all variables from a class as a single list with one line of code, I should probably figure out how to best classify the classes for the most general use in my various lists. I think it would be ideal to avoid any class that is used only once, like how only hats has a "feminineSilly" sub-category, so I should think of how to deal with that. Would also be a good way to add the test lists for legless species, winter coats, ETC...

I put so much time into testing and experimenting with the last item, that I feel done for now. I'll just see about adding any words I may have written down in my notes somewhere, and push this change. I am considering new practice projects to work out before I come back, so there will probably be a break in additions here.

Current ideas: considering changing the next 2.0 goals. Thinking about dropping Qt to use a game engine instead for cross-platform GUI and because the ultimate goal of all this practice is to produce my own games, using Django for a web version, and maybe abandoning having one unified randomizer and instead create branches where each randomizer is a single simpler program.. or keep the main general, but re-structure it so that it has a different branches for each specific randomizer. Just take the shared "get results" code, and have separate UI scripts for each one.

I'm not sure just yet which direction I'll take it. For now I'm gonna step away to code simple programs in Django for practice. I'll come back when I've learned a few more tricks and possible re-code the randomizer once more in prep for whatever GUI I implement, whether PyQt, Django, Godot, or whatever.

V 1.2: getting more off my to-do list because I want to get back to working on GUI.

1. Added the accessories lists as they currently are to theLists.py. It's alright, but there could be more. Never did research make-up for that to be randomly generated as well..
2. Re-coded the outfit checks for efficiency.. not needed for a program of this level, but I like coming up with superior code. Since the next item was to add a new function, it's gratifying to replace 3 functions with potentially more to come with 1.
3. Added winter/summer hats.
4. Turned bonnets from feminine headwear, to silly feminine headwear.
5. Added likes/dislikes.

With these items, I ticked off the entirety of my to-do list. Besides the ongoing need to fill in the empty/small lists with more items. For now, I'm back to working on the GUI next. I feel like any further complexity to the character generator (besides tweaking the outfit part to be more refined) would just make it overly busy.

V 1.1: Many revisions.

1. Removed simple outfits. The more complex system wound up being the highlight of the character randomizer, so unless I find a reason why it should be included, it's cut. I'll keep the old lists, though. Maybe I'll find a use for them later, not that I ever properly filled those in.
2. Added a "bypass checks" variable to just combine everything together and skipp all checks that are in place to ensure results are appropriate.
3. Added the shoes in by default rather than save them for the accessories; just made sense.
4. Added a user input to bypass species: the highlight really is the outfit generator, so if you don't want some silly species..
5. Found out lists could += themselves; at some point I thought it would result in: [1, 2, 3, [4, 5, 6]] instead of the desired [1, 2, 3, 4, 5, 6] if I did that.. a quick test proved it was fine. The difference is negligible efficiency improvement and marginally more readable code, but that's good enough for me to change it.
6. Added cold/warm overwear check to add appropriate items (currently just shoes, but will involve some accessory options later) to the proper lists.
7. In the process of getting that running, it should now be easier to do all kinds of appropriateness checks for the clothing, though it will require the order of selected clothes to be carefully planned.
8. Added a .geany project file. I wanted to use a python-specific IDE, but.. wound up either too complex an environment to work with (constant error messages WHILE I'm writing? Highlighting lines where the run program breaks, and the colors used make it unreadable!? Complete customization, but so feature rich I will need a one week lesson course that doesn't exist to be able to properly set it up in a way that using a simpler IDE would largely fix) or not as portable as needed (I code on Linux, Raspberry Pi (64bit), and own an Android tablet with a keyboard that may get involved in the future, so it needs to run on basically anything).
9. The carefully planned order for 7 was bothering me, restructured it so that the code now chooses final options, then re-selects items based on checks. Order no longer matters, but adding lots of checks could make the results too chaotic. I doubt I will add that many, though. If I'm going to have 20 checks, I just need a more versatile system for compiling results than "Is X this? Then add that to the other list and choose a new result."
10. Found a bug caused by not treating lists properly, leading to, apparently, the lists becoming ever longer each cycle with duplicate items. Wasn't noticeable until the code was getting more complex and results were beginning to show up in combinations that weren't supposed to be possible. It didn't break the code until today, it just made it more inefficient in an invisible. As a standard, the starting of all local lists now use .copy() instead of just = otherList.
11. Odds and ends of minor changes. Particularly fond of mermaid (cephalopod) added to species.


V 1.0: CLI edition complete. Ish.

Honestly, it's hardly complete. Some lists could use populating still, and I'm not completely satisfied with the game randomizer, but I think I may have more options for building the randomizers if I had drop menus, tabs, checkboxes, and other GUI elements to work with.

So for now, I did a few various tweaks and changes, put together a random game prompt generator. It is okay, but I feel the random mechanics could be better.

Next time I update will be 1.1, and the start of adding GUI. May be a week before I push another update.. unless I really just want to work on those lists that need work.

1.0 was nothing but a benchmark before I decided I had enough randomized content for now and started on the GUI anyway. I didn't want to bog down with error checking and revising for usability on a CLI, so I focused on making the randomizers run before I put my real effort into the GUI.


v 0.4: got to cracking shortly after the last update, and added more lists, and begun the random game generator.

More or less, I did some more idle work on the lists, and added 3 new lists in preparation for the game generator, as well as spent a lot of time considering how the game generator will work.

I feel my gut feelings have served me well through the other randomizers and getting the right combination for specific and general to make many possible combinations, but produce coherent ideas from them. So I spent hours working through those gut feelings.

Currently I feel I am close with the description on the readme, but that I'm not quite there.


V 0.3: I sat back and did lots of minor things.

Altered many inline comments, removed a few blank results that found their way into my lists due to how I populated them with copied online lists that I find-and-replaced to fit into the code. Renamed some variables to be clearer about their contents among the lists.

Added a bit to the to-do list, and.. really, I worked on revising and improving the lists in general this time, that's where most of the effort went.

Had the idea to make a list of lists to manage singular/plural forms of words, then realized I could cut out the singular form of that particular list by adding a single word to the location randomizer, simplifying the work immensely.

May keep in mind the idea of a list of lists for later, though. Say, if I get my list of greek words, so I can pull a random result from the main list, get ["arachne", "spider"] and then pull from the proper indexes to use both the Greek and English forms of the word.

Tweaked the random location generator to give more varried results, especially in silly mode.

Altered the randomizer that adds "punk" to the end of a random word to make a genre so that if 1 or fewer results were requested of it, it gives a single string result.

Attempted to start the game generator in the hopes of ticking that off and declaring this V1.0 so that I could begin on GUI development, but I'm still undecided on how it should function enough to begin. I have some ideas and am getting there, though.


V 0.2: Fixed an incomplete part of the code for the random outfit on the character generator. I focused so much on the harder part, I forgot to do the easy half. Revised location generator to no longer compile results into a sentence, but a set of keywords like the character randomizer. I like this set-up better. More upfront about throwing the content at the user to interpret it:

"Genre: paranormalpunk
Location: shopping center
Social Structure: a team
Species: hairless dwarves."

Rather than "A paranormalpunk shopping center populated by a team of hairless dwarves."

Hairless dwarves is such a perfect combination possibility. So is paranormalpunk, really.

Also added a check for legless species, after not noticing that I was reading from the wrong variable for an hour, resulting in all True results from the function.


V 0.1: initial commit. A mostly functional CLI set of randomizers, with a couple things on the to-do list still before I declare it 1.0 and begin work on the 2.0 GUI version.

